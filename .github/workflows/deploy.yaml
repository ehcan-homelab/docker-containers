name: Deploy
on:
  push:
    branches:
      - main
    paths:
      - '**.yml'
      - '**.yaml'

jobs:
  prepare_matrix:
    name: Prepare Matrix
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for accurate changed files detection

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **.yml
            **.yaml

      - name: Set dynamic matrix
        id: set-matrix
        run: |
          CHANGED_FILES='${{ steps.changed-files.outputs.all_changed_and_modified_files }}'
          CHANGED_STACKS_ARRAY=()

          for file in $CHANGED_FILES; do
              # Check if the file is a root YAML file
              if [[ $file =~ ^([^/]+)\.yml$ ]]; then
                  stack_name="${BASH_REMATCH[1]}"
                  CHANGED_STACKS_ARRAY+=("$stack_name")
              # Check if the file is in a data/{{stack_name}} directory
              elif [[ $file =~ ^data/([^/]+)/ ]]; then
                  stack_name="${BASH_REMATCH[1]}"
                  CHANGED_STACKS_ARRAY+=("$stack_name")
              fi
          done
          CHANGED_STACKS=$(printf "%s " "${CHANGED_STACKS_ARRAY[@]}")
          CHANGED_STACKS="${CHANGED_STACKS% }"

          CONFIGS=$(cat configs.json)

          FILTERED_CONFIGS=$(echo "$CONFIGS" | jq -c --arg changed_stacks "$CHANGED_STACKS" '
            [.[] |
                .stack_name as $stack_name |
                select(
                  ($changed_stacks | split(" ") | index($stack_name)) != null
                )
            ]
          ')

          if [ "$(echo "$FILTERED_CONFIGS" | jq 'length')" -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

          echo $FILTERED_CONFIGS
          echo "matrix=$(echo "$FILTERED_CONFIGS" | jq -c '{config: .}')" >> $GITHUB_OUTPUT

  deploy:
    needs: prepare_matrix
    if: needs.prepare_matrix.outputs.has_changes == 'true'
    name: Deploy (${{ matrix.config.stack_name }}, ${{ matrix.config.host }})
    runs-on: self-hosted
    strategy:
      matrix: ${{ fromJson(needs.prepare_matrix.outputs.matrix) }}
      fail-fast: false

    env:
      DOCKER_HOST: tcp://${{ matrix.config.host }}:2375
      DOCKER_CONTEXT_NAME: ${{ matrix.config.stack_name }}-ctx
      DOCKER_COMPOSE_FILE: ${{ matrix.config.stack_name }}.yml
      DOCKER_PROJECT_NAME: ${{ matrix.config.stack_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker context
        run: |
          docker context \
            create ${{ env.DOCKER_CONTEXT_NAME }} \
            --docker host=${{ env.DOCKER_HOST }}

      - name: Load secret from 1Password
        id: op-load-secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          NOTION_MOVIE_METADATA_UPDATER_OMDB_API_KEY: "op://Github Actions/notion-movie-metadata-updater/OMDB_API_KEY"
          NOTION_MOVIE_METADATA_UPDATER_NOTION_TOKEN: "op://Github Actions/notion-movie-metadata-updater/NOTION_TOKEN"
          NOTION_MOVIE_METADATA_UPDATER_NOTION_DB_ID: "op://Github Actions/notion-movie-metadata-updater/NOTION_DB_ID"
          NOTION_MOVIE_METADATA_UPDATER_TVTIME_USERNAME: "op://Github Actions/notion-movie-metadata-updater/TVTIME_USERNAME"
          NOTION_MOVIE_METADATA_UPDATER_TVTIME_PASSWORD: "op://Github Actions/notion-movie-metadata-updater/TVTIME_PASSWORD"
          NOTION_MOVIE_METADATA_UPDATER_API_TOKEN: "op://Github Actions/notion-movie-metadata-updater/API_TOKEN"

      - name: Inject secrets
        run: |
          case ${{ env.DOCKER_PROJECT_NAME }} in
            "arr-stack")
              echo "${{ secrets.ARR_CIFS }}" >> $GITHUB_ENV
              echo "API_KEY_RADARR=${{ secrets.CHECKRR_API_KEY_RADARR }}" >> $GITHUB_ENV
              echo "API_KEY_SONARR=${{ secrets.CHECKRR_API_KEY_SONARR }}" >> $GITHUB_ENV
              ;;
            "notion-movie-metadata-updater")
              echo "OMDB_API_KEY=${{ steps.op-load-secret.outputs.NOTION_MOVIE_METADATA_UPDATER_OMDB_API_KEY }}" >> $GITHUB_ENV
              echo "NOTION_TOKEN=${{ steps.op-load-secret.outputs.NOTION_MOVIE_METADATA_UPDATER_NOTION_TOKEN }}" >> $GITHUB_ENV
              echo "NOTION_DB_ID=${{ steps.op-load-secret.outputs.NOTION_MOVIE_METADATA_UPDATER_NOTION_DB_ID }}" >> $GITHUB_ENV
              echo "TVTIME_USERNAME=${{ steps.op-load-secret.outputs.NOTION_MOVIE_METADATA_UPDATER_TVTIME_USERNAME }}" >> $GITHUB_ENV
              echo "TVTIME_PASSWORD=${{ steps.op-load-secret.outputs.NOTION_MOVIE_METADATA_UPDATER_TVTIME_PASSWORD }}" >> $GITHUB_ENV
              echo "API_TOKEN=${{ steps.op-load-secret.outputs.NOTION_MOVIE_METADATA_UPDATER_API_TOKEN }}" >> $GITHUB_ENV
              ;;
            "open-webui")
              echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
              echo "OPEN_WEBUI_SECRET_KEY=${{ secrets.OPEN_WEBUI_SECRET_KEY }}" >> $GITHUB_ENV
              echo "OPEN_ROUTER_API_KEY=${{ secrets.OPEN_ROUTER_API_KEY }}" >> $GITHUB_ENV
              echo "LITELLM_MASTER_KEY=${{ secrets.LITELLM_MASTER_KEY }}" >> $GITHUB_ENV
              echo "LITELLM_SALT_KEY=${{ secrets.LITELLM_SALT_KEY }}" >> $GITHUB_ENV
              ;;
            "watchtower")
              server="${{ matrix.config.server }}"
              case "$server" in
                "docker")
                  echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN_DOCKER }}" >> $GITHUB_ENV
                  ;;
                "traefik")
                  echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN_TRAEFIK }}" >> $GITHUB_ENV
                  ;;
                "grafana")
                  echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN_GRAFANA }}" >> $GITHUB_ENV
                  ;;
              esac
              ;;
          esac

      - name: Copy data files
        if: ${{ matrix.config.data }}
        run: |
          for item in $(echo '${{ toJson(matrix.config.data) }}' | jq -c '.[]'); do
            FROM=$(echo "$item" | jq -r '.from')
            TO=$(echo "$item" | jq -r '.to')
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -r "$FROM" ${{ secrets.SSH_USER }}@${{ matrix.config.host }}:"$TO"
          done

      - name: Deploy with Docker Compose
        run: |
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} compose --file ${{ env.DOCKER_COMPOSE_FILE }} \
            --project-name ${{ env.DOCKER_PROJECT_NAME }} up -d --remove-orphans

      - name: Cleanup Docker context
        if: always()
        run: |
          docker context rm ${{ env.DOCKER_CONTEXT_NAME }} --force || true
